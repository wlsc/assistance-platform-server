import de.tudarmstadt.informatik.tk.assistanceplatform.data.GeographicPosition;
import de.tudarmstadt.informatik.tk.assistanceplatform.modules.hotplaces.HotPlacesBundle;
import de.tudarmstadt.informatik.tk.assistanceplatform.services.messaging.MessagingService;
import de.tudarmstadt.informatik.tk.assistanceplatform.services.messaging.MessagingService.Channel;
import de.tudarmstadt.informatik.tk.assistanceplatform.services.messaging.dummy.DummyMessagingService;


public class HotPlacesMain {
	public static void main (String[] args) {
		MessagingService ms = new DummyMessagingService();
		HotPlacesBundle bundle = new HotPlacesBundle(ms);
		
		Channel c = ms.channel(GeographicPosition.class.getSimpleName());
		GeographicPosition lastPos = null;
		for(int i = 0; i < 100000; i++) {
			long timestamp = i;
			//timestamp = 0;
			long uid = (long) (Math.random() * Integer.MAX_VALUE);
			//long uid = 0;
			double lat = Math.round(10 + (10 - Math.random() * 20.5));
			double lon = Math.round(10 + (10 - Math.random() * 20.5));
			
			GeographicPosition pos = new GeographicPosition(lat, lon, uid, timestamp);
			
			/*if(lastPos != null) {
				System.out.println(lastPos.hashCode() + " " + pos.hashCode());
				System.out.println(lastPos.equals(pos));
			}
			lastPos = pos;*/
			c.publish(new GeographicPosition(lat, lon, uid, timestamp));
		}
	}
}